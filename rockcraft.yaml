name: snaprecommend
# see https://documentation.ubuntu.com/rockcraft/en/1.6.0/explanation/bases/
# for more information about bases and using 'bare' bases for chiselled rocks
base: ubuntu@22.04 # the base environment for this Flask application
version: '0.1' # just for humans. Semantic versioning is recommended
summary: The rock for the snap recommendations service
description: |
    The rock for the service behind snap recommendations. bundled in this service is a flask application that serves the recommendations.
    As well as a scheduled cronjob for a pipeline that fetches snap data and generates the recommendations. 
    More information can be found at https://github.com/canonical/snap-recommendation-service
# the platforms this rock should be built on and run on.
# you can check your architecture with `dpkg --print-architecture`
platforms:
    amd64:
    # arm64:
    # ppc64el:
    # s390x:

# to ensure the flask-framework extension works properly, your Flask application
# should have an `app.py` file with an `app` object as the WSGI entrypoint.
# a `requirements.txt` file with at least the flask package should also exist.
# see https://documentation.ubuntu.com/rockcraft/en/1.6.0/reference/extensions/flask-framework
# for more information.
extensions:
    - flask-framework

# uncomment the sections you need and adjust according to your requirements.
parts:  # you need to uncomment this line to add or update any part.
  flask-framework/install-app:
    prime:
      # by default, only the files in app/, templates/, static/, migrate, migrate.sh,
      # migrate.py and app.py are copied into the image. You can modify the list
      # below to override the default list and include or exclude specific
      # files/directories in your project.
      # note: prefix each entry with "flask/app/" followed by the local path.
      - flask/app/.env
      - flask/app/app.py
      - flask/app/config.py
      - flask/app/migrate.py
      - flask/app/app
      - flask/app/collector
      - flask/app/migrations

# add this part if you want to add packages slices to your image.
# you can find a list of packages slices at https://github.com/canonical/chisel-releases
#   runtime-slices:
#     plugin: nil
#     stage-packages:
#       # list the required package slices for your flask application below.
#       # for example, for the slice libs of libpq5:
#       - libpq5_libs

  runtime-debs:
    plugin: nil
    stage-packages:
      - libpq5
