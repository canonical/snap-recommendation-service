from urllib.parse import urlparse

from pymacaroons import Macaroon
from snaprecommend.auth import utils
from snaprecommend.auth.constants import SSO_LOGIN_URL, PERMISSIONS


def get_authorization_header(root, discharge):
    """
    Bind root and discharge macaroons and return the authorization header.
    """

    bound = Macaroon.deserialize(root).prepare_for_request(
        Macaroon.deserialize(discharge)
    )

    return "macaroon root={}, discharge={}".format(root, bound.serialize())


def get_publishergw_authorization_header(developer_token):
    return {"Authorization ": f"Macaroon {developer_token}"}


def is_authenticated(session):
    """
    Checks if the user is authenticated from the session
    Returns True if the user is authenticated
    """
    return (
        "publisher" in session
        and "macaroon_discharge" in session
        and "macaroon_root" in session
    )


def empty_session(session):
    """
    Empty the session, used to logout.
    """
    session.pop("macaroon_root", None)
    session.pop("macaroon_discharge", None)
    session.pop("publisher", None)


def get_caveat_id(root):
    """
    Returns the caveat_id generated by the SSO
    """
    location = urlparse(SSO_LOGIN_URL).hostname
    (caveat,) = [
        c
        for c in Macaroon.deserialize(root).third_party_caveats()
        if c.location == location
    ]

    return caveat.caveat_id


def request_macaroon():
    """
    Request a macaroon from dashboard.
    Returns the macaroon.
    """
    response = utils.post_macaroon({"permissions": PERMISSIONS})

    return response["macaroon"]
